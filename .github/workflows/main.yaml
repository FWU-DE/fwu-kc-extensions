name: "Test and deploy"
on:
  push:
    branches:
      - main
    paths:
      - 'pom.xml'
      - '*/pom.xml'
      - '.github/workflows/main.yaml'

jobs:
  package:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Build with Maven
        run: mvn --batch-mode package

  publish:
    needs: package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Get Version
        id: getVersion
        uses: mavrosxristoforos/get-xml-info@1.0
        with:
          xml-file: 'pom.xml'
          xpath: "//*[local-name()='project']/*[local-name()='properties']/*[local-name()='projectVersion']"
      - name: Get Modules
        id: getModules
        uses: mavrosxristoforos/get-xml-info@1.0
        with:
          xml-file: 'pom.xml'
          xpath: "//*[local-name()='project']/*[local-name()='modules']/*[local-name()='module']"
      - name: Check release exists
        id: check-release
        run: |
          rm modules.txt || true
          TAG=${{ steps.getVersion.outputs.info }}
          echo "TAG: $TAG"
          response=$(curl --silent -H 'Accept: application/vnd.github.v3+json' "https://api.github.com/repos/FWU-DE/fwu-kc-extensions/releases/tags/$TAG")
          message=$(echo $response | jq -r .message)
          echo "Message: $message"
          if [ "$message" = "Not Found" ]; then
            echo "version=$TAG" >> $GITHUB_OUTPUT
            IFS="," read -a modules <<< ${{ steps.getModules.outputs.info }}
            for module in ${modules[@]}; do
              echo "Found module: $module"
              if [ "$module" != "fwu-kc-extensions" ]; then
                echo "$module/target/$module-$TAG.jar" >> modules.txt
              fi
            done
            csv=$(paste -s -d , modules.txt)
            echo "Generated CSV: $csv"
            echo "artifacts=$csv" >> $GITHUB_OUTPUT
          else
            echo "Release $TAG already exists!"
          fi
      - name: Deploy to GitHub packages
        if: ${{ steps.check-release.outputs.version != '' }}
        run: mvn --batch-mode clean deploy -DskipTests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish GitHub release
        if: ${{ steps.check-release.outputs.version != '' }}
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.check-release.outputs.version }}
          artifacts: "${{ steps.check-release.outputs.artifacts }}"
          bodyFile: "CHANGELOG.md"
          token: ${{ secrets.GITHUB_TOKEN }}
