{
	"info": {
		"_postman_id": "423a1e8a-67ea-48e4-8187-0d4faca5230a",
		"name": "FWU",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "6328296"
	},
	"item": [
		{
			"name": "HMAC mapper",
			"item": [
				{
					"name": "Applicy login (Misty)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();",
									"",
									"var base64Url = response.access_token.split('.')[1];",
									"var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');",
									"var jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {",
									"    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);",
									"}).join(''));",
									"",
									"var json = JSON.parse(jsonPayload);",
									"console.log(json);",
									"",
									"pm.test('should have pseudomized data', function () {",
									"    const subject = json.sub;",
									"    pm.expect(subject).to.not.eq(\"misty\");",
									"    pm.environment.set('applicySubject', subject);",
									"});",
									"",
									"pm.test('should have other pseudomyms', function () {",
									"    pm.expect(json.otherPseudonyms).to.be.not.null;",
									"    const pseudonyms = json.otherPseudonyms;",
									"    pm.expect(pseudonyms[\"applicy\"]).to.be.not.null;",
									"    pm.expect(pseudonyms[\"formand\"]).to.be.not.null;",
									"    pm.expect(pseudonyms[\"progrand\"]).to.be.not.null;",
									"    pm.expect(pseudonyms[\"desight\"]).to.be.not.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "applicy",
									"type": "text"
								},
								{
									"key": "username",
									"value": "misty",
									"type": "text"
								},
								{
									"key": "password",
									"value": "test",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{authUrl}}/realms/fwu/protocol/openid-connect/token",
							"host": [
								"{{authUrl}}"
							],
							"path": [
								"realms",
								"fwu",
								"protocol",
								"openid-connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Progrant login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();",
									"",
									"var base64Url = response.access_token.split('.')[1];",
									"var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');",
									"var jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {",
									"    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);",
									"}).join(''));",
									"",
									"var json = JSON.parse(jsonPayload);",
									"console.log(json);",
									"",
									"const subject = json.sub;",
									"pm.test('should have pseudomized data', function () {",
									"    pm.expect(subject).to.not.eq(\"misty\");",
									"});",
									"",
									"pm.test('should have same subject', function () {",
									"    pm.expect(subject).to.eq(pm.environment.get('applicySubject'));",
									"});",
									"pm.test('should have other pseudomyms', function () {",
									"    pm.expect(json.otherPseudonyms).to.be.not.null;",
									"    const pseudonyms = json.otherPseudonyms;",
									"    pm.expect(pseudonyms[\"applicy\"]).to.be.not.null;",
									"    pm.expect(pseudonyms[\"formand\"]).to.be.not.null;",
									"    pm.expect(pseudonyms[\"progrand\"]).to.be.not.null;",
									"    pm.expect(pseudonyms[\"desight\"]).to.be.not.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "progrant",
									"type": "text"
								},
								{
									"key": "username",
									"value": "misty",
									"type": "text"
								},
								{
									"key": "password",
									"value": "test",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{authUrl}}/realms/fwu/protocol/openid-connect/token",
							"host": [
								"{{authUrl}}"
							],
							"path": [
								"realms",
								"fwu",
								"protocol",
								"openid-connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Formand login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();",
									"",
									"var base64Url = response.access_token.split('.')[1];",
									"var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');",
									"var jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {",
									"    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);",
									"}).join(''));",
									"",
									"var json = JSON.parse(jsonPayload);",
									"console.log(json);",
									"",
									"const subject = json.sub;",
									"pm.test('should have pseudomized data', function () {",
									"    pm.expect(subject).to.not.eq(\"misty\");",
									"});",
									"",
									"pm.test('should have unique subject', function () {",
									"    pm.expect(subject).to.not.eq(pm.environment.get('applicySubject'));",
									"});",
									"",
									"pm.test('should have unique subject', function () {",
									"    pm.expect(subject).to.not.eq(pm.environment.get('applicySubjectExt'));",
									"});",
									"pm.test('should have other pseudomyms', function () {",
									"    pm.expect(json.otherPseudonyms).to.be.not.null;",
									"    const pseudonyms = json.otherPseudonyms;",
									"    pm.expect(pseudonyms[\"applicy\"]).to.be.not.null;",
									"    pm.expect(pseudonyms[\"formand\"]).to.be.not.null;",
									"    pm.expect(pseudonyms[\"progrand\"]).to.be.not.null;",
									"    pm.expect(pseudonyms[\"desight\"]).to.be.not.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "formand",
									"type": "text"
								},
								{
									"key": "username",
									"value": "misty",
									"type": "text"
								},
								{
									"key": "password",
									"value": "test",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{authUrl}}/realms/fwu/protocol/openid-connect/token",
							"host": [
								"{{authUrl}}"
							],
							"path": [
								"realms",
								"fwu",
								"protocol",
								"openid-connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Desight login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();",
									"",
									"var base64Url = response.access_token.split('.')[1];",
									"var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');",
									"var jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {",
									"    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);",
									"}).join(''));",
									"",
									"var json = JSON.parse(jsonPayload);",
									"console.log(json);",
									"",
									"const subject = json.sub;",
									"pm.test('should have pseudomized data', function () {",
									"    pm.expect(subject).to.not.eq(\"misty\");",
									"});",
									"",
									"pm.test('should have unique subject', function () {",
									"    pm.expect(subject).to.not.eq(pm.environment.get('applicySubject'));",
									"});",
									"",
									"pm.test('should have unique subject', function () {",
									"    pm.expect(subject).to.not.eq(pm.environment.get('applicySubjectExt'));",
									"});",
									"pm.test('should have other pseudomyms', function () {",
									"    pm.expect(json.otherPseudonyms).to.be.not.null;",
									"    const pseudonyms = json.otherPseudonyms;",
									"    pm.expect(pseudonyms[\"applicy\"]).to.be.not.null;",
									"    pm.expect(pseudonyms[\"formand\"]).to.be.not.null;",
									"    pm.expect(pseudonyms[\"progrand\"]).to.be.not.null;",
									"    pm.expect(pseudonyms[\"desight\"]).to.be.not.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "desight",
									"type": "text"
								},
								{
									"key": "username",
									"value": "misty",
									"type": "text"
								},
								{
									"key": "password",
									"value": "test",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{authUrl}}/realms/fwu/protocol/openid-connect/token",
							"host": [
								"{{authUrl}}"
							],
							"path": [
								"realms",
								"fwu",
								"protocol",
								"openid-connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Applicy login (Brock)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();",
									"",
									"var base64Url = response.access_token.split('.')[1];",
									"var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');",
									"var jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {",
									"    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);",
									"}).join(''));",
									"",
									"var json = JSON.parse(jsonPayload);",
									"console.log(json);",
									"",
									"const subject = json.sub;",
									"pm.test('should have pseudomized data', function () {",
									"    pm.expect(subject).to.not.eq(\"brock\");",
									"});",
									"",
									"pm.test('should have unique subject', function () {",
									"    pm.expect(subject).to.not.eq(pm.environment.get('applicySubject'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "applicy",
									"type": "text"
								},
								{
									"key": "username",
									"value": "brock",
									"type": "text"
								},
								{
									"key": "password",
									"value": "test",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{authUrl}}/realms/fwu/protocol/openid-connect/token",
							"host": [
								"{{authUrl}}"
							],
							"path": [
								"realms",
								"fwu",
								"protocol",
								"openid-connect",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "HMAC Resource",
			"item": [
				{
					"name": "Find original value",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"clientId\": \"applicy\",\n    \"originalValues\": [\n        \"brock\",\n        \"misty\",\n        \"iam-admin\"\n    ],\n    \"testValue\": \"{{applicySubject}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{authUrl}}/realms/fwu/hmac",
							"host": [
								"{{authUrl}}"
							],
							"path": [
								"realms",
								"fwu",
								"hmac"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{currentAccessToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const echoPostRequest = {",
					"    url: `${pm.environment.get('authUrl')}/realms/master/protocol/openid-connect/token`,",
					"    method: 'POST',",
					"    header: 'Content-Type:application/x-www-form-urlencoded',",
					"    body: {",
					"        mode: 'urlencoded',",
					"        urlencoded: [",
					"            { key: 'grant_type', value: 'password' },",
					"            { key: 'username', value: pm.environment.get('adminUsername') },",
					"            { key: 'password', value: pm.environment.get('adminPassword') },",
					"            { key: 'client_id', value: 'admin-cli' },",
					"        ]",
					"    }",
					"};",
					"pm.sendRequest(echoPostRequest, function (err, res) {",
					"    console.log(err ? err : res.json());",
					"    if (err === null) {",
					"        console.log('Saving the token and expiry date')",
					"        pm.environment.set('currentAccessToken', res.json().access_token)",
					"    }",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "authUrl",
			"value": "http://localhost:18080/auth",
			"type": "default"
		}
	]
}